#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'nombus'
require 'csv'
require 'rainbow'
require 'public_suffix'
require 'pry'
require 'pry-debugger'


class App
  include Methadone::Main
  include Methadone::CLILogging
  include Nombus
  
  config = Configurator.new( YAML::load( File.open(ConfigFile) ) )
  
  main do |input_file|
    # Override defaults with command line options
    config.column = options[:column]
    config.separator = options[:separator]
    config.lookup_servers = options[:nameservers]
    
    # Open/create & configure csv files
    domain_file = CSV.open(input_file, :col_sep => config.separator)
    first_line = domain_file.readline
    if first_line.length < options[:column].to_i
      exit_now! "Error: Column #{options[:column]} is out of range. File #{input_file} has #{first_line.length} columns"
    end
    domain_file.rewind if options['no-headers']
    if options[:output]
      nombus_domains = CSV.open(options[:output], "wb", :col_sep => config.separator)
      nombus_domains << first_line unless options['no-headers']
    end
    if options[:fail]
      fails = CSV.open(options[:fail], "wb")
      fails << config.fail_headers
    end
    
    # Loop through file and check domain names
    dns = LookerUpper.new(config.our_nameserver, config.old_acom_ips, config.all_acom_ips, config.lookup_servers)
    domain_file.each_with_index do |row, row_num|
      debug "Row #{row_num+1}: #{row}".color(config.debug_color)
      domain = row[config.column_index]
      if not PublicSuffix.valid? domain
        warn (message = "#{domain}: not a valid domain name").color(config.warn_color)
        fails << [domain, message] if options[:fail]
        next
      end
    	begin
    	  records = dns.getresources(domain, 'any')
        nameserver, a_record = dns.get_records(records)
        # if it doesn't have our namserver but does have one of our
        # old ip addresses then we found one that we want to record.
        debug "#{domain}: using our server? #{dns.our_server == nameserver}".color(config.debug_color)
        debug "#{domain}: using one of our old ips? #{dns.old_acom_ips.include? a_record}".color(config.debug_color)
        debug "#{domain}: not managed by us? #{dns.not_managed_by_us?(nameserver, a_record)}".color(config.debug_color)
        if dns.not_managed_by_us?(nameserver, a_record)
          # Ignore if we've already set them up with the current IP.
          unless a_record == config.acom_ip
            info "#{domain}: Not managed by us".color(config.success_color)
            nombus_domains << row if options[:output]
          end
        elsif dns.not_pointed_at_us? a_record
          warn (message = "#{domain}: Not pointed at us").color(config.warn_color)
          fails << [domain, message] if options[:fail]
        else
          info "#{domain}: Managed by us"
        end
      rescue Dnsruby::NXDomain, Dnsruby::ServFail, Dnsruby::ResolvError => dns_error
        message = dns.lookup_error_message(domain, dns_error)
        warn message.color(config.warn_color)
        fails << [domain, message] if options[:fail]
        next
      end
    end
    
  end
  
  # Configure command line options/arguments and build the help menu.
  on("-v", "--version", "Print the version number & quit") do
    info "nombus #{Version}"
    exit
  end
  description 'Check a CSV file for domain names that are not managed by Windermere DNS servers.'
  options[:separator] = config.separator
  on "-s CHARACTER", "--separator", "Column separator for csv file. Use 'tab' to indicate tabs."
  options[:column] = config.column
  on "-c NUMBER", "--column", "The column where the domain name is stored in the csv file, starting at 1"
  options[:nameservers] = config.lookup_servers
  on "-n 'SRVR1 SRVR2'", "--nameservers",	"A quoted list of nameservers to use for lookup queries"
  on("--no-headers","Specify that the csv file has no headers, default assumes headers exist") do
    # Methadone sets this to false for some reason if 'no' is at beginning of op so doing it manually
    options['no-headers'] = true
  end
  on "-o PATH/FILE.CSV", "--output", "Specify a path where records for domains that are not managed by us to be captured."
  on "-f PATH/FILE.CSV", "--fail", "Specify a path where you would like records for domains that failed dns lookup"
  arg :csv_file, "Path to a CSV file with a list of domain names"
  use_log_level_option
  
  go!
end
