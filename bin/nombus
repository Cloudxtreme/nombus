#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'nombus'
require 'csv'
require 'rainbow'

class App
  include Methadone::Main
  include Methadone::CLILogging
  
  config = Configurator.new( YAML::load( File.open('nombus.rc.yml') ) )
  
  main do |input_file|
    error = if column_error(options[:column])
      exit_now! error
    else
      config.column = options[:column]
    end
    error = if separator_error(options[:separator])
      exit_now! error
    else
      config.separator = options[:separator]
    end
    dns = Nombus::LookerUpper.new( :nameserver => config.nameservers.split )
    domain_file = CSV.open(input_file, :col_sep => config.separator)
    nombus_domains = CSV.open(options[:output], "wb", :col_sep => config.separator) if options[:output]
    # Add headers from 1st line to output if there are any
    headers =  domain_file.readline unless options['no-headers']
    nombus_domains << headers if options[:output]
    if options[:fail]
      fails = CSV.open(options[:fail], "wb")
      fails << config.fail_headers
    end
    
    domain_file.each_with_index do |row, row_num|
      debug "Row #{row_num+1}: #{row}".color(config.debug_color)
      domain = row[config.column]
      if not PublicSuffix.valid? domain
        warn (message = "#{domain}: not a valid domain name").color(config.warn_color)
        fails << [domain, message] if options[:fail]
        next
      end
    	begin
    	  records = dns.getresources(domain, 'any')
        nameserver, a_record = dns.get_records(records)
        # if it doesn't have our namserver but does have one of our
        # old ip addresses then we found one that we want to record.
        
        # Not really sure how to access nameserver and other WreDns classes
        debug "#{domain}: using our server? #{dns.NameServer::Master == nameserver}".color(Nombus::DebugColor)
        debug "#{domain}: using one of our old ips? #{WreDns::OldAcomIps.include? a_record}".color(Nombus::DebugColor)
        debug "#{domain}: not managed by us? #{Nombus.NotManagedByUs?(WreDns::NameServer, nameserver, WreDns::OldAcomIps, a_record)}".color(Nombus::DebugColor)
        if Nombus.NotManagedByUs? WreDns::NameServer, nameserver, WreDns::OldAcomIps, a_record
          # Ignore if we've already set them up with the current IP.
          unless a_record == WreDns::AcomIp
            info "#{domain}: Not managed by us".color(Nombus::SuccessColor)
            nombus_domains << row  if options[:output]
          end
        elsif Nombus.NotPointedAtUs? WreDns::AllAcomIps,  a_record
          warn (message = "#{domain}: Not pointed at us").color(Nombus::WarnColor)
          fails << [domain_name, message] if options[:fail]
        else
          info "#{domain}: Managed by us"
        end
      rescue Dnsruby::NXDomain, Dnsruby::ServFail, Dnsruby::ResolvError => dns_error
        message = Nombus::LookupErrorMessage(domain, dns_error)
        warn message.color(Nombus::WarnColor)
        fails << [domain.to_s, message] if options[:fail]
        next
      end
    end
    
  end
  
  # Configure command line options/arguments and build the help menu.
  on("-v", "--version", "Print the version number & quit") do
    info "nombus #{Nombus::Version}"
    exit
  end
  description 'Check a CSV file for domain names that are not managed by Windermere DNS servers.'
  options[:separator] = config.separator
  on "-s CHARACTER", "--separator", "Column separator for csv file. Use 'tab' to indicate tabs."
  options[:column] = config.column
  on "-c NUMBER", "--column", "The column where the domain name is stored in the csv file, starting at 1"
  options[:nameservers] = config.nameservers
  on "-n 'SRVR1 SRVR2'", "--nameservers",	"A quoted list of nameservers to use for queries"
  on("--no-headers","Specify that the csv file has no headers, default assumes headers exist") do
    # Methadone sets this to false for some reason if 'no' is at beginning of op so doing it manually
    options['no-headers'] = true
  end
  on "-o PATH/FILE.CSV", "--output", "Specify a path where you would like records for domains that are not managed by us to be captured."
  on "-f PATH/FILE.CSV", "--fail", "Specify a path where you would like records for domains that failed dns lookup"
  arg :csv_file, "Path to a CSV file with a list of domain names"
  use_log_level_option
  
  go!
end
